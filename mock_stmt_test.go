// Code generated by MockGen. DO NOT EDIT.
// Source: mock_test.go

// Package utcer is a generated GoMock package.
package utcer

import (
	context "context"
	driver "database/sql/driver"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStmt is a mock of Stmt interface
type MockStmt struct {
	ctrl     *gomock.Controller
	recorder *MockStmtMockRecorder
}

// MockStmtMockRecorder is the mock recorder for MockStmt
type MockStmtMockRecorder struct {
	mock *MockStmt
}

// NewMockStmt creates a new mock instance
func NewMockStmt(ctrl *gomock.Controller) *MockStmt {
	mock := &MockStmt{ctrl: ctrl}
	mock.recorder = &MockStmtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStmt) EXPECT() *MockStmtMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStmt) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStmtMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStmt)(nil).Close))
}

// NumInput mocks base method
func (m *MockStmt) NumInput() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumInput")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumInput indicates an expected call of NumInput
func (mr *MockStmtMockRecorder) NumInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumInput", reflect.TypeOf((*MockStmt)(nil).NumInput))
}

// Exec mocks base method
func (m *MockStmt) Exec(args []driver.Value) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockStmtMockRecorder) Exec(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockStmt)(nil).Exec), args)
}

// Query mocks base method
func (m *MockStmt) Query(args []driver.Value) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockStmtMockRecorder) Query(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStmt)(nil).Query), args)
}

// MockStmtWithChecker is a mock of StmtWithChecker interface
type MockStmtWithChecker struct {
	ctrl     *gomock.Controller
	recorder *MockStmtWithCheckerMockRecorder
}

// MockStmtWithCheckerMockRecorder is the mock recorder for MockStmtWithChecker
type MockStmtWithCheckerMockRecorder struct {
	mock *MockStmtWithChecker
}

// NewMockStmtWithChecker creates a new mock instance
func NewMockStmtWithChecker(ctrl *gomock.Controller) *MockStmtWithChecker {
	mock := &MockStmtWithChecker{ctrl: ctrl}
	mock.recorder = &MockStmtWithCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStmtWithChecker) EXPECT() *MockStmtWithCheckerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStmtWithChecker) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStmtWithCheckerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStmtWithChecker)(nil).Close))
}

// NumInput mocks base method
func (m *MockStmtWithChecker) NumInput() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumInput")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumInput indicates an expected call of NumInput
func (mr *MockStmtWithCheckerMockRecorder) NumInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumInput", reflect.TypeOf((*MockStmtWithChecker)(nil).NumInput))
}

// Exec mocks base method
func (m *MockStmtWithChecker) Exec(args []driver.Value) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockStmtWithCheckerMockRecorder) Exec(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockStmtWithChecker)(nil).Exec), args)
}

// Query mocks base method
func (m *MockStmtWithChecker) Query(args []driver.Value) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockStmtWithCheckerMockRecorder) Query(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStmtWithChecker)(nil).Query), args)
}

// CheckNamedValue mocks base method
func (m *MockStmtWithChecker) CheckNamedValue(arg0 *driver.NamedValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNamedValue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckNamedValue indicates an expected call of CheckNamedValue
func (mr *MockStmtWithCheckerMockRecorder) CheckNamedValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNamedValue", reflect.TypeOf((*MockStmtWithChecker)(nil).CheckNamedValue), arg0)
}

// MockStmtExecContext is a mock of StmtExecContext interface
type MockStmtExecContext struct {
	ctrl     *gomock.Controller
	recorder *MockStmtExecContextMockRecorder
}

// MockStmtExecContextMockRecorder is the mock recorder for MockStmtExecContext
type MockStmtExecContextMockRecorder struct {
	mock *MockStmtExecContext
}

// NewMockStmtExecContext creates a new mock instance
func NewMockStmtExecContext(ctrl *gomock.Controller) *MockStmtExecContext {
	mock := &MockStmtExecContext{ctrl: ctrl}
	mock.recorder = &MockStmtExecContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStmtExecContext) EXPECT() *MockStmtExecContextMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStmtExecContext) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStmtExecContextMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStmtExecContext)(nil).Close))
}

// NumInput mocks base method
func (m *MockStmtExecContext) NumInput() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumInput")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumInput indicates an expected call of NumInput
func (mr *MockStmtExecContextMockRecorder) NumInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumInput", reflect.TypeOf((*MockStmtExecContext)(nil).NumInput))
}

// Exec mocks base method
func (m *MockStmtExecContext) Exec(args []driver.Value) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockStmtExecContextMockRecorder) Exec(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockStmtExecContext)(nil).Exec), args)
}

// Query mocks base method
func (m *MockStmtExecContext) Query(args []driver.Value) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockStmtExecContextMockRecorder) Query(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStmtExecContext)(nil).Query), args)
}

// ExecContext mocks base method
func (m *MockStmtExecContext) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecContext", ctx, args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockStmtExecContextMockRecorder) ExecContext(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockStmtExecContext)(nil).ExecContext), ctx, args)
}

// MockStmtExecContextWithChecker is a mock of StmtExecContextWithChecker interface
type MockStmtExecContextWithChecker struct {
	ctrl     *gomock.Controller
	recorder *MockStmtExecContextWithCheckerMockRecorder
}

// MockStmtExecContextWithCheckerMockRecorder is the mock recorder for MockStmtExecContextWithChecker
type MockStmtExecContextWithCheckerMockRecorder struct {
	mock *MockStmtExecContextWithChecker
}

// NewMockStmtExecContextWithChecker creates a new mock instance
func NewMockStmtExecContextWithChecker(ctrl *gomock.Controller) *MockStmtExecContextWithChecker {
	mock := &MockStmtExecContextWithChecker{ctrl: ctrl}
	mock.recorder = &MockStmtExecContextWithCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStmtExecContextWithChecker) EXPECT() *MockStmtExecContextWithCheckerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStmtExecContextWithChecker) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStmtExecContextWithCheckerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStmtExecContextWithChecker)(nil).Close))
}

// NumInput mocks base method
func (m *MockStmtExecContextWithChecker) NumInput() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumInput")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumInput indicates an expected call of NumInput
func (mr *MockStmtExecContextWithCheckerMockRecorder) NumInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumInput", reflect.TypeOf((*MockStmtExecContextWithChecker)(nil).NumInput))
}

// Exec mocks base method
func (m *MockStmtExecContextWithChecker) Exec(args []driver.Value) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockStmtExecContextWithCheckerMockRecorder) Exec(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockStmtExecContextWithChecker)(nil).Exec), args)
}

// Query mocks base method
func (m *MockStmtExecContextWithChecker) Query(args []driver.Value) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockStmtExecContextWithCheckerMockRecorder) Query(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStmtExecContextWithChecker)(nil).Query), args)
}

// ExecContext mocks base method
func (m *MockStmtExecContextWithChecker) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecContext", ctx, args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockStmtExecContextWithCheckerMockRecorder) ExecContext(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockStmtExecContextWithChecker)(nil).ExecContext), ctx, args)
}

// CheckNamedValue mocks base method
func (m *MockStmtExecContextWithChecker) CheckNamedValue(arg0 *driver.NamedValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNamedValue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckNamedValue indicates an expected call of CheckNamedValue
func (mr *MockStmtExecContextWithCheckerMockRecorder) CheckNamedValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNamedValue", reflect.TypeOf((*MockStmtExecContextWithChecker)(nil).CheckNamedValue), arg0)
}

// MockStmtQueryContext is a mock of StmtQueryContext interface
type MockStmtQueryContext struct {
	ctrl     *gomock.Controller
	recorder *MockStmtQueryContextMockRecorder
}

// MockStmtQueryContextMockRecorder is the mock recorder for MockStmtQueryContext
type MockStmtQueryContextMockRecorder struct {
	mock *MockStmtQueryContext
}

// NewMockStmtQueryContext creates a new mock instance
func NewMockStmtQueryContext(ctrl *gomock.Controller) *MockStmtQueryContext {
	mock := &MockStmtQueryContext{ctrl: ctrl}
	mock.recorder = &MockStmtQueryContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStmtQueryContext) EXPECT() *MockStmtQueryContextMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStmtQueryContext) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStmtQueryContextMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStmtQueryContext)(nil).Close))
}

// NumInput mocks base method
func (m *MockStmtQueryContext) NumInput() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumInput")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumInput indicates an expected call of NumInput
func (mr *MockStmtQueryContextMockRecorder) NumInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumInput", reflect.TypeOf((*MockStmtQueryContext)(nil).NumInput))
}

// Exec mocks base method
func (m *MockStmtQueryContext) Exec(args []driver.Value) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockStmtQueryContextMockRecorder) Exec(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockStmtQueryContext)(nil).Exec), args)
}

// Query mocks base method
func (m *MockStmtQueryContext) Query(args []driver.Value) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockStmtQueryContextMockRecorder) Query(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStmtQueryContext)(nil).Query), args)
}

// QueryContext mocks base method
func (m *MockStmtQueryContext) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContext", ctx, args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockStmtQueryContextMockRecorder) QueryContext(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockStmtQueryContext)(nil).QueryContext), ctx, args)
}

// MockStmtQueryContextWithChecker is a mock of StmtQueryContextWithChecker interface
type MockStmtQueryContextWithChecker struct {
	ctrl     *gomock.Controller
	recorder *MockStmtQueryContextWithCheckerMockRecorder
}

// MockStmtQueryContextWithCheckerMockRecorder is the mock recorder for MockStmtQueryContextWithChecker
type MockStmtQueryContextWithCheckerMockRecorder struct {
	mock *MockStmtQueryContextWithChecker
}

// NewMockStmtQueryContextWithChecker creates a new mock instance
func NewMockStmtQueryContextWithChecker(ctrl *gomock.Controller) *MockStmtQueryContextWithChecker {
	mock := &MockStmtQueryContextWithChecker{ctrl: ctrl}
	mock.recorder = &MockStmtQueryContextWithCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStmtQueryContextWithChecker) EXPECT() *MockStmtQueryContextWithCheckerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStmtQueryContextWithChecker) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStmtQueryContextWithCheckerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStmtQueryContextWithChecker)(nil).Close))
}

// NumInput mocks base method
func (m *MockStmtQueryContextWithChecker) NumInput() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumInput")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumInput indicates an expected call of NumInput
func (mr *MockStmtQueryContextWithCheckerMockRecorder) NumInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumInput", reflect.TypeOf((*MockStmtQueryContextWithChecker)(nil).NumInput))
}

// Exec mocks base method
func (m *MockStmtQueryContextWithChecker) Exec(args []driver.Value) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockStmtQueryContextWithCheckerMockRecorder) Exec(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockStmtQueryContextWithChecker)(nil).Exec), args)
}

// Query mocks base method
func (m *MockStmtQueryContextWithChecker) Query(args []driver.Value) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockStmtQueryContextWithCheckerMockRecorder) Query(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStmtQueryContextWithChecker)(nil).Query), args)
}

// QueryContext mocks base method
func (m *MockStmtQueryContextWithChecker) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContext", ctx, args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockStmtQueryContextWithCheckerMockRecorder) QueryContext(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockStmtQueryContextWithChecker)(nil).QueryContext), ctx, args)
}

// CheckNamedValue mocks base method
func (m *MockStmtQueryContextWithChecker) CheckNamedValue(arg0 *driver.NamedValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNamedValue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckNamedValue indicates an expected call of CheckNamedValue
func (mr *MockStmtQueryContextWithCheckerMockRecorder) CheckNamedValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNamedValue", reflect.TypeOf((*MockStmtQueryContextWithChecker)(nil).CheckNamedValue), arg0)
}

// MockStmtContext is a mock of StmtContext interface
type MockStmtContext struct {
	ctrl     *gomock.Controller
	recorder *MockStmtContextMockRecorder
}

// MockStmtContextMockRecorder is the mock recorder for MockStmtContext
type MockStmtContextMockRecorder struct {
	mock *MockStmtContext
}

// NewMockStmtContext creates a new mock instance
func NewMockStmtContext(ctrl *gomock.Controller) *MockStmtContext {
	mock := &MockStmtContext{ctrl: ctrl}
	mock.recorder = &MockStmtContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStmtContext) EXPECT() *MockStmtContextMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStmtContext) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStmtContextMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStmtContext)(nil).Close))
}

// NumInput mocks base method
func (m *MockStmtContext) NumInput() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumInput")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumInput indicates an expected call of NumInput
func (mr *MockStmtContextMockRecorder) NumInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumInput", reflect.TypeOf((*MockStmtContext)(nil).NumInput))
}

// Exec mocks base method
func (m *MockStmtContext) Exec(args []driver.Value) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockStmtContextMockRecorder) Exec(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockStmtContext)(nil).Exec), args)
}

// Query mocks base method
func (m *MockStmtContext) Query(args []driver.Value) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockStmtContextMockRecorder) Query(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStmtContext)(nil).Query), args)
}

// ExecContext mocks base method
func (m *MockStmtContext) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecContext", ctx, args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockStmtContextMockRecorder) ExecContext(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockStmtContext)(nil).ExecContext), ctx, args)
}

// QueryContext mocks base method
func (m *MockStmtContext) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContext", ctx, args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockStmtContextMockRecorder) QueryContext(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockStmtContext)(nil).QueryContext), ctx, args)
}

// MockStmtContextWithChecker is a mock of StmtContextWithChecker interface
type MockStmtContextWithChecker struct {
	ctrl     *gomock.Controller
	recorder *MockStmtContextWithCheckerMockRecorder
}

// MockStmtContextWithCheckerMockRecorder is the mock recorder for MockStmtContextWithChecker
type MockStmtContextWithCheckerMockRecorder struct {
	mock *MockStmtContextWithChecker
}

// NewMockStmtContextWithChecker creates a new mock instance
func NewMockStmtContextWithChecker(ctrl *gomock.Controller) *MockStmtContextWithChecker {
	mock := &MockStmtContextWithChecker{ctrl: ctrl}
	mock.recorder = &MockStmtContextWithCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStmtContextWithChecker) EXPECT() *MockStmtContextWithCheckerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStmtContextWithChecker) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStmtContextWithCheckerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStmtContextWithChecker)(nil).Close))
}

// NumInput mocks base method
func (m *MockStmtContextWithChecker) NumInput() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumInput")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumInput indicates an expected call of NumInput
func (mr *MockStmtContextWithCheckerMockRecorder) NumInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumInput", reflect.TypeOf((*MockStmtContextWithChecker)(nil).NumInput))
}

// Exec mocks base method
func (m *MockStmtContextWithChecker) Exec(args []driver.Value) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockStmtContextWithCheckerMockRecorder) Exec(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockStmtContextWithChecker)(nil).Exec), args)
}

// Query mocks base method
func (m *MockStmtContextWithChecker) Query(args []driver.Value) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockStmtContextWithCheckerMockRecorder) Query(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStmtContextWithChecker)(nil).Query), args)
}

// ExecContext mocks base method
func (m *MockStmtContextWithChecker) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecContext", ctx, args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockStmtContextWithCheckerMockRecorder) ExecContext(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockStmtContextWithChecker)(nil).ExecContext), ctx, args)
}

// QueryContext mocks base method
func (m *MockStmtContextWithChecker) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContext", ctx, args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockStmtContextWithCheckerMockRecorder) QueryContext(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockStmtContextWithChecker)(nil).QueryContext), ctx, args)
}

// CheckNamedValue mocks base method
func (m *MockStmtContextWithChecker) CheckNamedValue(arg0 *driver.NamedValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNamedValue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckNamedValue indicates an expected call of CheckNamedValue
func (mr *MockStmtContextWithCheckerMockRecorder) CheckNamedValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNamedValue", reflect.TypeOf((*MockStmtContextWithChecker)(nil).CheckNamedValue), arg0)
}
